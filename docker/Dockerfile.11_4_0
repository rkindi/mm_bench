# Triton Options: {pt_nightly, legacy, mlir, stable}
# - pt_nightly -- Uses the Triton included in the nightly pytorch install from above. Only supports CUDA 11.8.
# - legacy     -- Builds from source Triton legacy based on whatever revision is the mm_bench git submodule.
# - mlir       -- Builds from source Triton MLIR main branch based on whatever revision is the mm_bench git submodule.
# - stable     -- Builds from source Triton MLIR torch-inductor-stable branch based on whatever revision is the mm_bench git submodule.
ARG MM_BENCH_TRITON_OPTION

FROM rahulkindi/pt2-cresset:train-cuda-1140-pt2-sm80 AS base

# Base scripts
ENV DEBIAN_FRONTEND=noninteractive
RUN sudo apt-get update --fix-missing
# RUN apt install -y python3 python3-dev python3-pip

# Comes with Triton and PyTorch 2.0.
# RUN pip3 install --pre torch --index-url https://download.pytorch.org/whl/nightly/cu118
# RUN pip3 install numpy

RUN pip3 install Jinja2

# RUN apt install -y git

ARG MM_BENCH_TRITON_OPTION
ENV MM_BENCH_TRITON_OPTION_ENV=${MM_BENCH_TRITON_OPTION}

WORKDIR /

RUN sudo apt-get install -y zlib1g-dev
RUN pip3 install cmake

# pt_nightly
FROM base AS branch-triton-opt-pt_nightly
RUN echo "Using mode pt_nightly"

# mlir
FROM base AS branch-triton-opt-mlir
RUN echo "Using mode mlir"
COPY ../triton /triton
RUN sudo chmod -R 777 triton/python; cd triton/python; pip3 install -e .
# RUN pip3 uninstall -y pytorch-triton

# stable
FROM base AS branch-triton-opt-stable
RUN echo "Using mode stable"
COPY ../triton-torch-inductor-stable /triton
RUN sudo chmod -R 777 triton/python; cd triton/python; pip3 install -e .
# RUN pip3 uninstall -y pytorch-triton

# legacy
FROM base AS branch-triton-opt-legacy
RUN echo "Using mode legacy"
COPY ../triton-legacy /triton
RUN sudo chmod -R 777 triton/python; cd triton/python; pip3 install -e .
# RUN pip3 uninstall -y pytorch-triton

FROM branch-triton-opt-${MM_BENCH_TRITON_OPTION} AS branch-end-triton-stuff

FROM branch-end-triton-stuff AS final

RUN echo "alias trun='smi-wrap \"python3 scripts/triton_run.py\"'"  >> ~/.bashrc
RUN echo "alias crun='smi-wrap \"python3 scripts/cutlass_run.py\"'" >> ~/.bashrc
RUN echo "alias erun='smi-wrap \"python3 scripts/eager_run.py\"'"   >> ~/.bashrc

RUN echo "alias trun='smi-wrap \"python3 scripts/triton_run.py\"'"  >> ~/.zshrc
RUN echo "alias crun='smi-wrap \"python3 scripts/cutlass_run.py\"'" >> ~/.zshrc
RUN echo "alias erun='smi-wrap \"python3 scripts/eager_run.py\"'"   >> ~/.zshrc

COPY ./docker/patch_torch.sh /patch_torch.sh
RUN bash /patch_torch.sh

COPY ./docker/smi_wrap.sh /smi_wrap.sh
RUN echo "alias smi-wrap='bash /smi_wrap.sh'"   >> ~/.bashrc
RUN echo "alias smi-wrap='bash /smi_wrap.sh'"   >> ~/.zshrc

USER root